{"version":3,"sources":["Service/http.js","common/PokemonData.js","common/SinglePokemon.js","common/LoadMore.js","common/Filter.js","component/Header.js","utilites/pokemonList.js","component/Pokemons.js","App.js","serviceWorker.js","index.js"],"names":["axios","interceptors","response","use","error","data","status","alert","Promise","reject","PokemonData","currentPokemon","this","props","pokemon","pokemons","filter","poke","id","react_default","a","createElement","className","role","aria-labelledby","aria-hidden","map","key","src","sprites","front_default","width","height","alt","concat","name","types","type","stats","base_stat","weight","moves","length","slot","Component","SinglePokemon","_this","_this$props","image","pokemonId","data-toggle","data-target","onClick","common_PokemonData","LoadMore","pageLimit","Filter","currentType","pokemonTypes","aria-haspopup","aria-expanded","Header","aria-controls","aria-label","common_Filter","pokemonList","pageLimt","list","i","push","Pokemons","state","isloaded","currentItems","LoadData","_callee2","regenerator_default","wrap","_context2","prev","next","forEach","_ref2","Object","asyncToGenerator","mark","_callee","_context","get","process","sent","setState","toConsumableArray","stop","_x2","apply","arguments","handleClick","pokeId","handleLoadMore","handlePokeType","indexOf","_this2","find","_this3","pokemonsFilter","_this$state","component_Header","common_SinglePokemon","common_LoadMore","App","component_Pokemons","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a82b1189.chunk.js","sourcesContent":["import axios from \"axios\"\r\n\r\naxios.interceptors.response.use(null, error=>{\r\n    const expectedErrors = error.data.response.status >= 400 && error.data.response.status < 500\r\n    if(expectedErrors)alert(\"Something went wrong!!!\")\r\n     return Promise.reject(error)\r\n})\r\n\r\nexport function getPokemonsList(limit){\r\n    return axios.get(`${process.env.REACT_APP_URL}?limit=${limit}`)\r\n}\r\n\r\nexport function getSinglePokemon(id){\r\n    return axios.get(`${process.env.REACT_APP_URL}${id}`)\r\n}\r\n","//show up single pokemon data\r\n\r\nimport React, {Component} from \"react\"\r\n\r\nclass PokemonData extends Component{\r\n    render(){\r\n        //get current pokemon id\r\n       const {currentPokemon} = this.props\r\n\r\n       // get the current pokmon data\r\n       const pokemon = this.props.pokemons.filter(poke=>poke.data.id===currentPokemon)\r\n    return(\r\n            <div className=\"modal fade bd-example-modal-sm\" role=\"dialog\" aria-labelledby=\"mySmallModalLabel\" aria-hidden=\"true\">\r\n            <div className=\"modal-dialog modal-sm\">\r\n            <div className=\"modal-content\">\r\n                <div className=\"m-2\">\r\n\r\n                {/* mapping the current pokemon data in table */}\r\n                {pokemon.map(poke=>\r\n                // pokemon id\r\n                     <div className=\"card shadow-sm\" key={poke.data.id}>\r\n                {/* pokemon image */}\r\n                     <img src={poke.data.sprites.front_default}width=\"50%\" height=\"130\" alt={`${poke.data.name}`} className=\"mx-auto\"/>           \r\n                     <div className=\"card-body\"></div>\r\n                {/* pokemon title displayed with  name & id*/}    \r\n                     <h3 className=\"mt-3 mx-auto\">{`${poke.data.name} #${poke.data.id}`}</h3>\r\n                     {/* table data */}\r\n                      <table className=\"table\">\r\n                         <tbody>\r\n                             <tr>\r\n                             <th>Type</th>  \r\n                             {poke.data.types.map(type=><td key={type.type[\"name\"]}>{type.type[\"name\"]}</td>)}\r\n                             </tr>\r\n                             <tr>    \r\n                             <th>Attack</th>\r\n                                 <td>{poke.data.stats[4].base_stat}</td>\r\n                             </tr>\r\n                             <tr>\r\n                             <th>Defense</th>\r\n                                 <td>{poke.data.stats[3].base_stat}</td>\r\n                             </tr>\r\n                             <tr>\r\n                             <th>HP</th>\r\n                                 <td>{poke.data.stats[5].base_stat}</td>\r\n                             </tr>\r\n                             <tr>\r\n                             <th>SP Attack</th>\r\n                                 <td>{poke.data.stats[2].base_stat}</td>\r\n                             </tr>\r\n                             <tr>\r\n                             <th>SP Defense</th>\r\n                                 <td>{poke.data.stats[1].base_stat}</td>\r\n                             </tr>\r\n                             <tr>\r\n                             <th>Speed</th>\r\n                                 <td>{poke.data.stats[0].base_stat}</td>\r\n                             </tr>\r\n                             <tr>\r\n                             <th>Weight</th>\r\n                                 <td>{poke.data.weight}</td>\r\n                             </tr>\r\n                             <tr>\r\n                             <th>Total Moves</th>\r\n                                 <td>{poke.data.moves.length}</td>\r\n                             </tr>\r\n                         </tbody>\r\n                      </table>\r\n                      <div className=\"d-flex justify-content-between align-items-center\">\r\n                     <div className=\"btn-group\">\r\n                     {poke.data.types.map(type=> <button key={type.slot}type=\"button\" \r\n                                    className=\"btn btn-sm btn-outline-secondary\">\r\n                                    {type.type.name}\r\n                                    </button>)}\r\n                        </div>\r\n                        </div>\r\n                    </div>)}                       \r\n                </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default PokemonData","// for one single pokemon item\r\n\r\nimport React, {Component} from \"react\"\r\nimport PokemonData from \"./PokemonData\";\r\n\r\nclass SinglePokemon extends Component{  \r\n    render(){\r\n        const {image, types, name, pokemonId, pokemons, currentPokemon} = this.props\r\n        return(\r\n        <div className=\"col-md-4 mb-4 \" \r\n            data-toggle=\"modal\" \r\n            data-target=\".bd-example-modal-sm\" \r\n            // handling pokemon data onClick\r\n            onClick={()=>this.props.onClick(pokemonId)}> \r\n          <div className=\"card shadow-sm\">\r\n\r\n            {/* pokemon image */}\r\n            <img src={image}width=\"50%\" height=\"130\" className=\"mx-auto\" alt={`${name}`}/> \r\n\r\n            {/* pokemon data will be retuen onClick          */}\r\n            <PokemonData pokemons={pokemons} currentPokemon={currentPokemon}/>\r\n\r\n            {/* pokemon name */}\r\n            <h4 className=\"mt-3 mx-auto\">{name}</h4>\r\n            <div className=\"d-flex justify-content-between align-items-center\">\r\n                <div className=\"btn-group ml-2 mb-2\">\r\n\r\n            {/* pokemon types */}\r\n                {types.map(type=> <button key={type.slot}type=\"button\" \r\n                                         className=\"btn btn-sm btn-outline-secondary\">\r\n                                        {type.type.name}\r\n                                        </button>)}\r\n                </div>\r\n            </div>\r\n         </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SinglePokemon;","// for loading more pokemons in the page\r\n\r\nimport React from \"react\"\r\n\r\nfunction LoadMore(props){\r\n    const {onClick, pageLimit} = props\r\n    return(\r\n        <div className=\"row\">\r\n            <button className=\"btn btn-primary btn-lg  mx-auto col-10\" \r\n                    onClick={()=>onClick(pageLimit)}>\r\n                    Load More...\r\n                    </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoadMore;","//filtering pokemons by type\r\n\r\nimport React from \"react\"\r\n\r\nfunction Filter(props){\r\nconst {currentType, pokemonTypes, onClick} = props\r\nreturn(\r\n    <div className=\"btn-group col-11\">\r\n      <button type=\"button\" className=\"btn btn-primary dropdown-toggle col-7 offset-1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        {currentType}\r\n      </button>\r\n      <div className=\"dropdown-menu col-7 offset-1\" >\r\n      {pokemonTypes.map(type =><span key={type} \r\n                      className=\"dropdown-item\" onClick={()=>onClick(type)}>\r\n                      {type}\r\n                      </span>)}\r\n      </div>\r\n    </div>\r\n)\r\n}\r\n\r\nexport default Filter","import React from \"react\"\r\nimport Filter from \"../common/Filter\";\r\n\r\nfunction Header(props){\r\n  const {currentType, pokemonTypes, onClick} = props\r\n    return(\r\n      <div className=\"bg-dark mb-5\">\r\n        <nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\r\n        <h2 className=\"text-white\">Pokemon</h2>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarCollapse\">\r\n          <form className=\"form-inline mt-2 mt-md-0 col offset-8\">\r\n            <Filter pokemonTypes={pokemonTypes} currentType={currentType} onClick={onClick}/>\r\n          </form>\r\n        </div>\r\n      </nav>\r\n      </div>\r\n   \r\n    )\r\n}\r\n\r\nexport default Header","\r\nexport function pokemonList(pageLimt){\r\n    const list =[]\r\n        for(let i= pageLimt; i<pageLimt+12; i++){\r\n            list.push(i)\r\n        }\r\n        return list;\r\n    }\r\n","// main pokemon component\r\n\r\nimport React, {Component} from \"react\"\r\nimport {getSinglePokemon} from \"../Service/http\"\r\nimport SinglePokemon from \"../common/SinglePokemon\"\r\nimport LoadMore from \"../common/LoadMore\";\r\nimport Header from \"./Header\";\r\nimport {pokemonList} from \"../utilites/pokemonList\"\r\n\r\n\r\nclass Pokemons extends Component{\r\n   state={\r\n        data:[],   //getting all pokemons in array of objects\r\n        isloaded: false,  // checking if the component is loaded\r\n        currentPokemon:\"\",  // current pokemon ID\r\n        pageLimit: 12,   // pokemons page limit\r\n        currentItems:[],\r\n        //pokemon types/categeries\r\n        pokemonTypes:[\"All\",\"poison\", \"water\", \"grass\", \"fire\", \"bug\", \"normal\", \"electronic\", \r\n                        \"ground\", \"fairy\",\"figthing\"],\r\n        currentType: \"All\" // current pokemon type\r\n}\r\n\r\n\r\n LoadData=async(pageLimit)=>{   // getting array of objects for pokemons \r\n    try{\r\n            const list = pokemonList(pageLimit)  // function to get a limited array of pokemons for each page\r\n                list.forEach(async(poke)=>{\r\n                    const pokemon = await getSinglePokemon(poke)        //calling API\r\n                    this.setState({data: [...this.state.data, pokemon]})  //adding to the state what we got from server\r\n                    this.setState({isloaded: true})\r\n            })\r\n    }catch(error){  // handling error\r\n        if(error.data.response.status(404)){\r\n            alert(\"The required request is not found.\")\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// calling loadData method to fetch the data\r\ncomponentDidMount(){this.LoadData(this.state.pageLimit, 20)}\r\n\r\n// handling current pokemin\r\nhandleClick=(pokeId)=>this.setState({currentPokemon: pokeId})\r\n\r\n//handling loading more pokemons on the page\r\nhandleLoadMore=()=>{\r\n            const pageLimit = this.state.pageLimit + 12\r\n            this.LoadData(pageLimit)  // calling api to fetch the new chunck of data\r\n            this.setState({pageLimit})\r\n    }\r\n// handling the current pokemon type/categery\r\nhandlePokeType=(type)=>{\r\n    this.setState({currentType: type})\r\n    //reset the data to begin from the first page\r\n    const data = this.state.data.filter(poke=> this.state.data.indexOf(poke) < 12)  \r\n    this.setState({data})\r\n}\r\n \r\n// filtering the data as per the current pokemon type\r\npokemonsFilter(pokemons){\r\n        if(this.state.currentType !== \"All\"){\r\n           pokemons= this.state.data.filter(poke=> poke.data.types.find(\r\n                          type=>type.type.name===this.state.currentType))                         \r\n                          return pokemons}\r\n            return pokemons= this.state.data}\r\n\r\n    render(){\r\n                //if data not loaded will retaurn \"loading sign\"\r\n        if(!this.state.isloaded)return<p className=\"m-3\">Loading...</p>  \r\n        let pokemons = this.pokemonsFilter(this.state.data)\r\n        const {pokemonTypes,currentType, currentPokemon, pageLimit} = this.state\r\n        return(\r\n            <React-Fragment>\r\n                <Header pokemonTypes={pokemonTypes} \r\n                        currentType={currentType}\r\n                        onClick={this.handlePokeType}/>\r\n                <div className=\"album py-5 bg-light\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            {pokemons.map(pokemon=>\r\n                                <SinglePokemon key={pokemon.data.id} \r\n                                                types={pokemon.data.types} \r\n                                                name={pokemon.data.name}\r\n                                                image={pokemon.data.sprites.front_default}\r\n                                                pokemonId={pokemon.data.id}\r\n                                                pokemons={pokemons}\r\n                                                onClick={this.handleClick}\r\n                                                currentPokemon={currentPokemon} />)}\r\n                        </div>\r\n                    </div>\r\n                    <LoadMore onClick={this.handleLoadMore} pageLimit={pageLimit}/>\r\n                </div>\r\n            </React-Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokemons;","import React from 'react';\nimport './App.css';\nimport Pokemons from './component/Pokemons';\n\nfunction App() {\n  return (\n    <div>\n      <Pokemons/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}